(in-package :bknr-user)

(enable-interpol-syntax)

(defclass show-imagemap-handler (prefix-handler)
  ())

(defmethod handle ((page-handler show-imagemap-handler))
  (let ((map-id (parse-url)))
    (let ((imagemap (find-imagemap map-id)))
      (with-store-image (image (imagemap-image imagemap))
	(with-default-image (image)
	  (let ((red (allocate-color 255 0 0))
		(white (allocate-color 255 255 255))
		(orange (allocate-color 255 140 80)))
	    (loop for area in (imagemap-clickable-areas imagemap)
		  do (draw-polygon (imagemap-area-polygon area)
				   :color (if (equal area (session-value :map-selected-area)) red orange)
				   :filled t))
	    (when (session-value :map-points)
	      (with-thickness (3)
		(with-default-color (white)
		  (let ((edit-points (session-value :map-points)))
		    (case (length edit-points)
		      (0 t)
		      (2 (draw-filled-circle (car edit-points) (cadr edit-points) 3))
		      (4 (apply #'draw-line edit-points))
		      (t (draw-polygon (session-value :map-points))))))))))
	(emit-image-to-browser image :jpg)))))
  
(defclass edit-imagemap-handler (prefix-handler)
  ()
  (:default-initargs :require-user-flag :admin))

(defmethod handle ((page-handler edit-imagemap-handler))
  (multiple-value-bind
	(map-id operation-string)
      (parse-url)
    (with-bknr-page (:title #?"imagemap editor for imagemap $(map-id)")
      (let ((imagemap (find-imagemap map-id :create t)))
	(case (make-keyword-from-string operation-string)
	  (:add-point
	   (let* ((coord-string (or (caar (request-query))
				    (error "missing map coordinates")))
		  (point (mapcar #'parse-integer (split "," coord-string)))
		  (clickable-area (imagemap-clickable-area-at imagemap point)))
	     (setf (session-value :map-selected-area) clickable-area)
	     (if clickable-area
		 (if (session-value :map-points)
		     (html (:p (:princ-safe #?"can't add point $(point) - already within another area")))
		     (html (:p (:princ-safe #?"area linked to $((imagemap-area-url clickable-area))")
			       (cmslink (self-url :command "delete-area")
				 (:princ "delete")))))
		 (progn
		   (setf (session-value :map-points) (append point (session-value :map-points)))
		   (html (:p (:princ-safe #?"added point $(point)")))))))
	  (:clear-points
	   (setf (session-value :map-points) nil)
	   (html (:p "point list cleared")))
	  (:delete-area
	   (if (session-value :map-selected-area)
	       (progn
		 (delete-clickable-area imagemap (session-value :map-selected-area))
		 (html (:p "area deleted")))
	       (html (:p "no area selected"))))
	  (:make-polygon
	   (with-query-params (url)
	     (unless (< 2 (length (session-value :map-points)))
	       (error "select at least three points for a polygon"))
	     (unless (and (stringp url)
			  (not (equal "" url)))
	       (error "enter a valid url to link the polygon to"))
	     (add-clickable-area imagemap :url url
				 :polygon (session-value :map-points))
	     (setf (session-value :map-points) nil)
	     (html (:p (:princ-safe #?"new polygon linked to $(url)")))))
	  (t (html (:p #?"unknown operation $(operation-string)"))))
	(html ((:form :action (self-url :command "make-polygon"))
	       (if (session-value :map-points)
		   (html
		     (:princ (format nil "~A point~:P collected "
                                     (/ (length (session-value :map-points)) 2)))
                     (cmslink (self-url :command "clear-points") (:princ "clear"))
		     (when (< 4 (length (session-value :map-points)))
		       (html " link to url: " ((:input :type "text" :name "url" :width 40))
			     " " ((:input :type "submit" :value "make polygon")))))
		   (html "no points collected")))
	      (:p ((:a :href (self-url :command "add-point"))
		   ((:img :ismap "ismap" :src (self-url :prefix "show-imagemap" :command ""))))))))))

(defclass imagemap-handler (prefix-handler)
  ())

(defmethod handle ((page-handler imagemap-handler))
  (let* ((map-id (parse-url))
	 (imagemap (find-imagemap map-id :create t))
	 (coord-string (or (caar (request-query))
			   (error "missing map coordinates"))))
    (let* ((point (mapcar #'parse-integer (split "," coord-string)))
	   (clickable-area (imagemap-clickable-area-at imagemap point)))
      (if clickable-area
	  (with-http-response (:response *response-moved-permanently*)
	    (setf (header-out :location) (imagemap-area-url clickable-area))
	    (with-http-body ()))
	  (with-bknr-page (:title "inactive clickable-area")
	    (html "the point you clicked is not within an active clickable area"))))))

(define-bknr-tag imagemap-def (&key imagemap-name)
  (imagemap-html-areadefs (find-imagemap imagemap-name)))
